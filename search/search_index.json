{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Postgres Controller The Brose E-Bike Postgres Operator adds users ( PgUser ) and databases ( PgDatabase ) as resource types in Kubernetes clusters, and simplifies the process of creating and managing databases and service roles. If you want to create Postgres instances in K8s checkout the Zalando Postgres Operator . When using this operator you need a user with superuser like privileges. Checkout the documentation for more information. The operator can interact with a variety of supported Postgres versions from different Vendors (e.g. Self hosted, Azure, AWS, GCP). The user which connects to the Postgres instance should be a superuser or a user with superuser like privileges. This website provides the full technical documentation for the project, and can be used as a reference; if you feel that there's anything missing, please let us know or raise a PR to add it.","title":"Introduction"},{"location":"#postgres-controller","text":"The Brose E-Bike Postgres Operator adds users ( PgUser ) and databases ( PgDatabase ) as resource types in Kubernetes clusters, and simplifies the process of creating and managing databases and service roles. If you want to create Postgres instances in K8s checkout the Zalando Postgres Operator . When using this operator you need a user with superuser like privileges. Checkout the documentation for more information. The operator can interact with a variety of supported Postgres versions from different Vendors (e.g. Self hosted, Azure, AWS, GCP). The user which connects to the Postgres instance should be a superuser or a user with superuser like privileges. This website provides the full technical documentation for the project, and can be used as a reference; if you feel that there's anything missing, please let us know or raise a PR to add it.","title":"Postgres Controller"},{"location":"contribution/","text":"Contribution Contributors The list of all Contributors can be found on Github . General Star the project on Github and help spread the word :) Post an issue if you find any bugs Contribute improvements or fixes using a Pull Request . If you're going to contribute, thank you! Please just be sure to: discuss with the authors on an issue ticket prior to doing anything big. follow the style, naming and structure conventions of the rest of the project. make commits atomic and easy to merge. verify all tests are passing. Build the project with make build and make tests run to do this. How it works This project aims to follow the Kubernetes Operator pattern It uses Controllers which provides a reconcile function responsible for synchronizing resources until the desired state is reached on the cluster Development Tools The Project was created with the Operator SDK The create resources use operator-sdk create api --group=postgres --version=v1 --kind=Pg<ResourceName> To build, test and run the project use make The go compiler is needed to build the controller The following tools can be installed using make: To install kustomize run make kustomize To install controller-gen run make controller-gen To install envtest run make envtest To install opm run make opm Test It Out Getting Started You\u2019ll need a Kubernetes cluster to run against. You can use KIND to get a local cluster for testing, or run against a remote cluster. Note: Your controller will automatically use the current context in your kubeconfig file (i.e. whatever cluster kubectl cluster-info shows). Running on the cluster Install the CRDs into the cluster: make install Install Instances of Custom Resources: kubectl apply -f config/samples/ Build and push your image to the location specified by IMG : make docker-build docker-push IMG = <some-registry>/postgres-operator:tag Deploy the controller to the cluster with the image specified by IMG : make deploy IMG = <some-registry>/postgres-operator:tag Running locally Run your controller (this will run in the foreground, so switch to a new terminal if you want to leave it running): make run NOTE: You can also run this in one step by running: make install run Uninstall CRDs To delete the CRDs from the cluster: make uninstall Undeploy controller UnDeploy the controller to the cluster: make undeploy Modifying the API definitions If you are editing the API definitions, generate the manifests such as CRs or CRDs using: make manifests NOTE: Run make --help for more information on all potential make targets More information can be found via the Kubebuilder Documentation","title":"Contribution"},{"location":"contribution/#contribution","text":"","title":"Contribution"},{"location":"contribution/#contributors","text":"The list of all Contributors can be found on Github .","title":"Contributors"},{"location":"contribution/#general","text":"Star the project on Github and help spread the word :) Post an issue if you find any bugs Contribute improvements or fixes using a Pull Request . If you're going to contribute, thank you! Please just be sure to: discuss with the authors on an issue ticket prior to doing anything big. follow the style, naming and structure conventions of the rest of the project. make commits atomic and easy to merge. verify all tests are passing. Build the project with make build and make tests run to do this.","title":"General"},{"location":"contribution/#how-it-works","text":"This project aims to follow the Kubernetes Operator pattern It uses Controllers which provides a reconcile function responsible for synchronizing resources until the desired state is reached on the cluster","title":"How it works"},{"location":"contribution/#development-tools","text":"The Project was created with the Operator SDK The create resources use operator-sdk create api --group=postgres --version=v1 --kind=Pg<ResourceName> To build, test and run the project use make The go compiler is needed to build the controller The following tools can be installed using make: To install kustomize run make kustomize To install controller-gen run make controller-gen To install envtest run make envtest To install opm run make opm","title":"Development Tools"},{"location":"contribution/#test-it-out","text":"","title":"Test It Out"},{"location":"contribution/#getting-started","text":"You\u2019ll need a Kubernetes cluster to run against. You can use KIND to get a local cluster for testing, or run against a remote cluster. Note: Your controller will automatically use the current context in your kubeconfig file (i.e. whatever cluster kubectl cluster-info shows).","title":"Getting Started"},{"location":"contribution/#running-on-the-cluster","text":"Install the CRDs into the cluster: make install Install Instances of Custom Resources: kubectl apply -f config/samples/ Build and push your image to the location specified by IMG : make docker-build docker-push IMG = <some-registry>/postgres-operator:tag Deploy the controller to the cluster with the image specified by IMG : make deploy IMG = <some-registry>/postgres-operator:tag","title":"Running on the cluster"},{"location":"contribution/#running-locally","text":"Run your controller (this will run in the foreground, so switch to a new terminal if you want to leave it running): make run NOTE: You can also run this in one step by running: make install run","title":"Running locally"},{"location":"contribution/#uninstall-crds","text":"To delete the CRDs from the cluster: make uninstall","title":"Uninstall CRDs"},{"location":"contribution/#undeploy-controller","text":"UnDeploy the controller to the cluster: make undeploy","title":"Undeploy controller"},{"location":"contribution/#modifying-the-api-definitions","text":"If you are editing the API definitions, generate the manifests such as CRs or CRDs using: make manifests NOTE: Run make --help for more information on all potential make targets More information can be found via the Kubebuilder Documentation","title":"Modifying the API definitions"},{"location":"getting_started/","text":"Work in Progress This page is still work in progress and will be updated as soon as possible. Feel free to create a Pull Request for this page. Getting Started","title":"Getting started"},{"location":"getting_started/#getting-started","text":"","title":"Getting Started"},{"location":"installation/","text":"Work in Progress This page is still work in progress and will be updated as soon as possible. Feel free to create a Pull Request for this page. Installation Learn about the various ways you can install postgres-operator and how to choose between them. Below you will find details on various scenarios we aim to support and that are compatible with the documentation on this website. Furthermore, the most applicable install methods are listed below for each of the situations. Default static install You don't require any tweaking of the cert-manager install parameters. The default static configuration can be installed as follows: kubectl apply -f https://github.com/brose-ebike/postgres-operator/releases/download/latest/install.yaml More information on this install method can be found here . Getting started You quickly want to learn how to use postgres-operator and what it can be used for. Continuous deployment You know how to configure your postgres-operator setup and want to automate this. This templated cert-manager manifest can be piped into your preferred deployment tool. In case you are using Helm for automation, cert-manager supports installing using Helm .","title":"Introduction"},{"location":"installation/#installation","text":"Learn about the various ways you can install postgres-operator and how to choose between them. Below you will find details on various scenarios we aim to support and that are compatible with the documentation on this website. Furthermore, the most applicable install methods are listed below for each of the situations.","title":"Installation"},{"location":"installation/#default-static-install","text":"You don't require any tweaking of the cert-manager install parameters. The default static configuration can be installed as follows: kubectl apply -f https://github.com/brose-ebike/postgres-operator/releases/download/latest/install.yaml More information on this install method can be found here .","title":"Default static install"},{"location":"installation/#getting-started","text":"You quickly want to learn how to use postgres-operator and what it can be used for.","title":"Getting started"},{"location":"installation/#continuous-deployment","text":"You know how to configure your postgres-operator setup and want to automate this. This templated cert-manager manifest can be piped into your preferred deployment tool. In case you are using Helm for automation, cert-manager supports installing using Helm .","title":"Continuous deployment"},{"location":"installation/helm/","text":"Work in Progress This page is still work in progress and will be updated as soon as possible. Feel free to create a Pull Request for this page. Helm","title":"Helm"},{"location":"installation/helm/#helm","text":"","title":"Helm"},{"location":"installation/kustomize/","text":"Work in Progress This page is still work in progress and will be updated as soon as possible. Feel free to create a Pull Request for this page. Kustomize","title":"Kustomize"},{"location":"installation/kustomize/#kustomize","text":"","title":"Kustomize"},{"location":"installation/simple/","text":"Work in Progress This page is still work in progress and will be updated as soon as possible. Feel free to create a Pull Request for this page. Kubectl apply","title":"Kubectl apply"},{"location":"installation/simple/#kubectl-apply","text":"","title":"Kubectl apply"},{"location":"usage/","text":"Work in Progress This page is still work in progress and will be updated as soon as possible. Feel free to create a Pull Request for this page. Usage","title":"Introduction"},{"location":"usage/#usage","text":"","title":"Usage"},{"location":"usage/database/","text":"Work in Progress This page is still work in progress and will be updated as soon as possible. Feel free to create a Pull Request for this page. PgDatabase Resource Definition The PgDatabase resource manages a database on the referenced instance. apiVersion : postgres.brose.bike/v1 kind : PgDatabase metadata : name : service_db spec : instance : namespace : \"default\" name : \"instance-001\" deletion : wait : true # Wait until the database was deleted manually on the postgres instance defaultPrivileges : - name : \"service\" roles : [ \"developer\" ] tablePrivileges : [ \"ALL\" ] sequencePrivileges : [ \"ALL\" ] functionPrivileges : [ \"ALL\" ] routinePrivileges : [ \"ALL\" ] typePrivileges : [ \"ALL\" ] publicPrivileges : revoke : false # revoke all public privileges from the database publicSchema : drop : false # drop the public schema from the database When creating the resource a deletion strategy can be specified. This allows the database resource to be deleted, without deleting the actual database in the Postgres Instance. Attribute Description","title":"Create Database"},{"location":"usage/database/#pgdatabase","text":"","title":"PgDatabase"},{"location":"usage/database/#resource-definition","text":"The PgDatabase resource manages a database on the referenced instance. apiVersion : postgres.brose.bike/v1 kind : PgDatabase metadata : name : service_db spec : instance : namespace : \"default\" name : \"instance-001\" deletion : wait : true # Wait until the database was deleted manually on the postgres instance defaultPrivileges : - name : \"service\" roles : [ \"developer\" ] tablePrivileges : [ \"ALL\" ] sequencePrivileges : [ \"ALL\" ] functionPrivileges : [ \"ALL\" ] routinePrivileges : [ \"ALL\" ] typePrivileges : [ \"ALL\" ] publicPrivileges : revoke : false # revoke all public privileges from the database publicSchema : drop : false # drop the public schema from the database When creating the resource a deletion strategy can be specified. This allows the database resource to be deleted, without deleting the actual database in the Postgres Instance.","title":"Resource Definition"},{"location":"usage/database/#attribute-description","text":"","title":"Attribute Description"},{"location":"usage/instance/","text":"PgInstance Resource Definition To manage databases and users on an instance, the PgInstance resource has to be created at first. The PgInstance allows the operator to connect to the postgres instance. The connection details can be provided as secret, config map or directly in the value field. After the PgInstance was created successfully, databases and users can be managed on the referenced instance. PgInstance from secrets PgInstance from config map PgInstance from value apiVersion : postgres.brose.bike/v1 kind : PgInstance metadata : name : my-instance spec : host : secretKeyRef : name : \"my-secret\" key : \"hostname\" port : secretKeyRef : name : \"my-secret\" key : \"port\" username : secretKeyRef : name : \"my-secret\" key : \"user\" password : secretKeyRef : name : \"my-secret\" key : \"password\" database : secretKeyRef : name : \"my-secret\" key : \"dbname\" sslMode : secretKeyRef : name : \"my-secret\" key : \"sslmode\" apiVersion : postgres.brose.bike/v1 kind : PgInstance metadata : name : my-instance spec : host : configMapKeyRef : name : \"my-config-map\" key : \"hostname\" port : configMapKeyRef : name : \"my-config-map\" key : \"port\" username : configMapKeyRef : name : \"my-config-map\" key : \"user\" password : configMapKeyRef : name : \"my-config-map\" key : \"password\" database : configMapKeyRef : name : \"my-config-map\" key : \"dbname\" sslMode : configMapKeyRef : name : \"my-config-map\" key : \"sslmode\" apiVersion : postgres.brose.bike/v1 kind : PgInstance metadata : name : my-instance spec : host : value : \"hostname\" port : value : \"5432\" username : value : \"user\" password : value : \"password\" database : value : \"dbname\" sslMode : value : \"sslmode\" Attribute Description The sources of the attribute values can differ. For example host, port, database and sslmode can be stored in the value. The username and password can be stored in a secret. The operator will resolve all attribute values when the resource gets applied. Its better to avoid having defined multiple sources for an attribute, buts its permitted by the operator. Attribute Decription Optional Default hostname The hostname of the postgres instance to which the operator should connect - port The port of the postgres instance to which the operator should connect 8432 username The username of the administration user which should be used by the operator - password The password of the administration user which should be used by the operator - database The maintenance database which should be used to establish the connection to postgres sslmode The SSLMode which should be used for the connection to the postgres instance none Required Privileges The user which is provided for the PgInstance to connect to the instance needs to have at least superuser like privileges. The minimal privileges are described below. Usually the superuser permission should be assigned to the user, which should be used by the operator. Superuser Privileges The superuser permission can be assigned easily by executing following sql statement, after replacing [USERNAME] with the name of the user which should be used by the operator: ALTER USER [ USERNAME ] WITH SUPERUSER ; Minimal Privileges The following privileges need to be assigned to the user or to one of the assigned roles of the user: Role Privileges: CREATEDB is needed to create new database, which can be managed by the PgDatabase resource CREATEROLE is needed to create new roles, which are created when using the PgUser resource CREATEUSER is needed to create new users, which can be managed by the PgUser resource Database Privileges: CONNECT for the given database is needed to establish the initial connection","title":"Create Instance"},{"location":"usage/instance/#pginstance","text":"","title":"PgInstance"},{"location":"usage/instance/#resource-definition","text":"To manage databases and users on an instance, the PgInstance resource has to be created at first. The PgInstance allows the operator to connect to the postgres instance. The connection details can be provided as secret, config map or directly in the value field. After the PgInstance was created successfully, databases and users can be managed on the referenced instance. PgInstance from secrets PgInstance from config map PgInstance from value apiVersion : postgres.brose.bike/v1 kind : PgInstance metadata : name : my-instance spec : host : secretKeyRef : name : \"my-secret\" key : \"hostname\" port : secretKeyRef : name : \"my-secret\" key : \"port\" username : secretKeyRef : name : \"my-secret\" key : \"user\" password : secretKeyRef : name : \"my-secret\" key : \"password\" database : secretKeyRef : name : \"my-secret\" key : \"dbname\" sslMode : secretKeyRef : name : \"my-secret\" key : \"sslmode\" apiVersion : postgres.brose.bike/v1 kind : PgInstance metadata : name : my-instance spec : host : configMapKeyRef : name : \"my-config-map\" key : \"hostname\" port : configMapKeyRef : name : \"my-config-map\" key : \"port\" username : configMapKeyRef : name : \"my-config-map\" key : \"user\" password : configMapKeyRef : name : \"my-config-map\" key : \"password\" database : configMapKeyRef : name : \"my-config-map\" key : \"dbname\" sslMode : configMapKeyRef : name : \"my-config-map\" key : \"sslmode\" apiVersion : postgres.brose.bike/v1 kind : PgInstance metadata : name : my-instance spec : host : value : \"hostname\" port : value : \"5432\" username : value : \"user\" password : value : \"password\" database : value : \"dbname\" sslMode : value : \"sslmode\"","title":"Resource Definition"},{"location":"usage/instance/#attribute-description","text":"The sources of the attribute values can differ. For example host, port, database and sslmode can be stored in the value. The username and password can be stored in a secret. The operator will resolve all attribute values when the resource gets applied. Its better to avoid having defined multiple sources for an attribute, buts its permitted by the operator. Attribute Decription Optional Default hostname The hostname of the postgres instance to which the operator should connect - port The port of the postgres instance to which the operator should connect 8432 username The username of the administration user which should be used by the operator - password The password of the administration user which should be used by the operator - database The maintenance database which should be used to establish the connection to postgres sslmode The SSLMode which should be used for the connection to the postgres instance none","title":"Attribute Description"},{"location":"usage/instance/#required-privileges","text":"The user which is provided for the PgInstance to connect to the instance needs to have at least superuser like privileges. The minimal privileges are described below. Usually the superuser permission should be assigned to the user, which should be used by the operator.","title":"Required Privileges"},{"location":"usage/instance/#superuser-privileges","text":"The superuser permission can be assigned easily by executing following sql statement, after replacing [USERNAME] with the name of the user which should be used by the operator: ALTER USER [ USERNAME ] WITH SUPERUSER ;","title":"Superuser Privileges"},{"location":"usage/instance/#minimal-privileges","text":"The following privileges need to be assigned to the user or to one of the assigned roles of the user: Role Privileges: CREATEDB is needed to create new database, which can be managed by the PgDatabase resource CREATEROLE is needed to create new roles, which are created when using the PgUser resource CREATEUSER is needed to create new users, which can be managed by the PgUser resource Database Privileges: CONNECT for the given database is needed to establish the initial connection","title":"Minimal Privileges"},{"location":"usage/user/","text":"Work in Progress This page is still work in progress and will be updated as soon as possible. Feel free to create a Pull Request for this page. PgUser Resource Definition The PgUser resource manages a role with login (user) on the referenced instance. apiVersion : postgres.brose.bike/v1 kind : PgUser metadata : name : service_user spec : instance : namespace : \"default\" name : \"instance-001\" secret : name : \"service-credentials\" databases : - name : \"service_db\" owner : true privileges : [ \"CONNECT\" , \"CREATE\" ] Attribute Description","title":"Create User"},{"location":"usage/user/#pguser","text":"","title":"PgUser"},{"location":"usage/user/#resource-definition","text":"The PgUser resource manages a role with login (user) on the referenced instance. apiVersion : postgres.brose.bike/v1 kind : PgUser metadata : name : service_user spec : instance : namespace : \"default\" name : \"instance-001\" secret : name : \"service-credentials\" databases : - name : \"service_db\" owner : true privileges : [ \"CONNECT\" , \"CREATE\" ]","title":"Resource Definition"},{"location":"usage/user/#attribute-description","text":"","title":"Attribute Description"}]}